# generated by datamodel-codegen:
#   filename:  labelme.json
#   timestamp: 2021-09-27T18:21:51+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional,Union

from pydantic import BaseModel
import os
import json 




ADE_FOLDER='./Input/'
OUTPUT_FOLDER='./Output/'

class Shape(BaseModel):
    label: str
    points: List[List[float]]
    group_id: Any
    shape_type: str
    flags: Dict[str, Any]


class LabelMeModel(BaseModel):
    version: str
    flags: Dict[str, Any]
    shapes: List[Shape]
    imagePath: str
    imageData: Any
    imageHeight: int
    imageWidth: int


class Source(BaseModel):
    folder: str
    filename: str
    origin: str


class Parts(BaseModel):
    hasparts: Union[int, List[int]]
    ispartof: Union[List[Any], int]
    part_level: int


class Polygon(BaseModel):
    x: List[int]
    y: List[int]
    click_date: Optional[List]


class ObjectItem(BaseModel):
    id: int
    name: str
    name_ndx: int
    hypernym: List[str]
    raw_name: str
    attributes: Union[List[Any], str]
    depth_ordering_rank: int
    occluded: Union[List[Any], str]
    crop: str
    parts: Parts
    instance_mask: str
    polygon: Polygon
    saved_date: str


class Annotation(BaseModel):
    filename: str
    folder: str
    imsize: List[int]
    source: Source
    scene: List[str]
    object: List[ObjectItem]


class Model(BaseModel):
    annotation: Annotation
    


for file in os.listdir(ADE_FOLDER):
    print(file)
    input_file = os.path.join(os.getcwd(),ADE_FOLDER,file)
    if(input_file.split('.')[-1]!="json"):
        continue
    try:
        with open(input_file,'rb') as infile:
            obj = json.loads(infile.read())
            ADE_Model =Model.parse_obj(obj)
    except Exception as e:
        print("error:" +file)
        continue
    shapes =[]
    for shape in ADE_Model.annotation.object:
        label = shape.name
        group_id=None
        shape_type = "polygon"
        flags={}
        points = []
        polygon= shape.polygon
        x,y = polygon.x, polygon.y
        points=[]
        [points.append(list(a)) for a in zip(x,y)]
        shapes.append(Shape(label=label, points = points, group_id=group_id, flags=flags,shape_type=shape_type))


    labelme = LabelMeModel(version="4.0.0", flags= {}, imagePath =ADE_Model.annotation.filename, imageWidth=ADE_Model.annotation.imsize[1], imageHeight=ADE_Model.annotation.imsize[0], imageData=None, shapes=shapes)

    with open(os.path.join(OUTPUT_FOLDER,file), 'w', encoding='utf-8') as f:
        json.dump(labelme.dict(), f, ensure_ascii=False, indent=4)